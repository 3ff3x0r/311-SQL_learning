1. Criação do Esquema SQL
-- Criar tabela de Agências
CREATE TABLE agencies (
    agency_id SERIAL PRIMARY KEY,
    agency VARCHAR(15),
    agency_name VARCHAR(255)
);

-- Criar tabela de Tipos de Reclamação
CREATE TABLE complainttypes (
    complaint_type_id SERIAL PRIMARY KEY,
    complaint_type VARCHAR(255),
    descriptor VARCHAR(255)
);

-- Criar tabela de Localizações
CREATE TABLE locations (
    location_id SERIAL PRIMARY KEY,
    incident_zip VARCHAR(15),
    incident_address VARCHAR(255),
    street_name VARCHAR(255),
    cross_street_1 VARCHAR(255),
    cross_street_2 VARCHAR(255),
    intersection_street_1 VARCHAR(255),
    intersection_street_2 VARCHAR(255),
    address_type VARCHAR(50),
    city VARCHAR(255),
    landmark VARCHAR(255),
    facility_type VARCHAR(255),
    community_board VARCHAR(255),
    bbl VARCHAR(15),
    borough VARCHAR(255),
    x_coordinate INTEGER,
    y_coordinate INTEGER,
    park_facility_name VARCHAR(255),
    park_borough VARCHAR(255),
    vehicle_type VARCHAR(255),
    taxi_company_borough VARCHAR(255),
    taxi_pick_up_location VARCHAR(255),
    bridge_highway_name VARCHAR(255),
    bridge_highway_direction VARCHAR(255),
    road_ramp VARCHAR(255),
    bridge_highway_segment VARCHAR(255),
    latitude FLOAT,
    longitude FLOAT,
    location VARCHAR(255)
);

-- Criar tabela de Reclamações
CREATE TABLE complaints (
    unique_key BIGINT PRIMARY KEY,
    created_date TIMESTAMP,
    closed_date TIMESTAMP,
    status VARCHAR(50),
    due_date TIMESTAMP,
    resolution_action_updated_date TIMESTAMP,
    resolution_description VARCHAR(255),
    agency_id INTEGER REFERENCES Agencies(agency_id),
    complaint_type_id INTEGER REFERENCES ComplaintTypes(complaint_type_id),
    location_id INTEGER REFERENCES Locations(location_id)
);

2. Tabelas temporárias
* Identificar incidentes que foram reportados mais de uma vez em um curto período de tempo (por exemplo, na mesma semana).
-- Criar uma tabela temporária para armazenar contagens de incidentes por semana
CREATE TEMPORARY TABLE weekly_incident_counts AS
SELECT 
    "Agency" AS agency, 
    "Complaint Type" AS complaint_type, 
    "Incident Address" AS location, 
    DATE_TRUNC('week', "Created Date"::timestamp) AS week, 
    COUNT(*) AS incident_count
FROM 
    tb311
GROUP BY 
    "Agency", 
    "Complaint Type", 
    "Incident Address", 
    DATE_TRUNC('week', "Created Date"::timestamp);

-- Consultar incidentes reportados mais de uma vez na mesma semana
SELECT 
    agency, 
    complaint_type, 
    location, 
    week, 
    incident_count
FROM 
    weekly_incident_counts
WHERE 
    incident_count > 1
ORDER BY incident_count DESC;

* Calcular a duração média dos incidentes para cada tipo de reclamação.
-- Criar uma tabela temporária para armazenar as durações dos incidentes
CREATE TEMPORARY TABLE incident_durations AS
SELECT 
    complaint_type_id, 
    EXTRACT(EPOCH FROM (closed_date::timestamp - created_date::timestamp) / (60 * 60)) AS duration_hours
FROM 
    complaints
WHERE 
    closed_date > created_date
    AND closed_date IS NOT NULL
    AND created_date IS NOT NULL
    AND created_date > '2010-01-01'::timestamp 
    AND closed_date < '2024-07-01'::timestamp;

-- Consultar a duração média por tipo de reclamação
SELECT 
    ct.complaint_type, 
    AVG(id.duration_hours) AS average_duration_hours
FROM 
    incident_durations id
JOIN 
    complaintTypes ct ON id.complaint_type_id = ct.complaint_type_id
GROUP BY 
    ct.complaint_type;

3. Pré-processamento    
* Normalização de Nomes de Agências.

--- criar a tabela temporária  'temp_agencies'
CREATE TEMPORARY TABLE temp_agencies (
    agency VARCHAR(10),
    agency_name VARCHAR(255)
);

-- Inserir os dados normalizados
INSERT INTO temp_agencies (agency, agency_name) VALUES
    ('3-1-1', '3-1-1'),
    ('ACS', 'Administration for Children''s Services'),
    ('CEO', 'Center for Employment Opportunities'),
    ('COIB', 'Conflicts of Interest Board'),
    ('DCAS', 'Department of Citywide Administrative Services'),
    ('DCP', 'Department of City Planning'),
    ('DCWP', 'Department of Consumer and Worker Protection'),
    ('DEP', 'Department of Environmental Protection'),
    ('DFTA', 'Department for the Aging'),
    ('DHS', 'Department of Homeless Services'),
    ('DOB', 'Department of Buildings'),
    ('DOE', 'Department of Education'),
    ('DOF', 'Department of Finance'),
    ('DOHMH', 'Department of Health and Mental Hygiene'),
    ('DOITT', 'Department of Information Technology and Telecommunications'),
    ('DORIS', 'Department of Records and Information Services'),
    ('DOT', 'Department of Transportation'),
    ('DPR', 'Department of Parks and Recreation'),
    ('DSNY', 'Department of Sanitation'),
    ('DVS', 'Department of Veterans'' Services'),
    ('EDC', 'Economic Development Corporation'),
    ('FDNY', 'Fire Department of New York'),
    ('HPD', 'Department of Housing Preservation and Development'),
    ('HRA', 'Human Resources Administration'),
    ('MOC', 'Mayor''s Office of Contract Services'),
    ('NYCEM', 'New York City Emergency Management'),
    ('NYPD', 'New York City Police Department'),
    ('OMB', 'Mayor''s Office of Management and Budget'),
    ('OSE', 'Mayor''s Office of Special Enforcement'),
    ('OTI', 'Office of Technology and Innovation'),
    ('TAT', 'New York City Tax Appeals Tribunal'),
    ('TAX', 'Department of Taxation and Finance'),
    ('TLC', 'Taxi and Limousine Commission');

--- atualizar a tabela `agencies` com nomes normalizados
UPDATE agencies
SET agency_name = temp_agencies.agency_name
FROM temp_agencies
WHERE agencies.agency = temp_agencies.agency; 

--- atualizar a tabela 'complaints' com os IDs de agências normalizados
UPDATE complaints
SET agency_id = a.agency_id
FROM tb311 t
JOIN agencies a ON t."Agency" = a.agency
WHERE complaints.unique_key = t."Unique Key";

--- Mostrar os resultados
SELECT DISTINCT agency, agency_name
FROM agencies
ORDER BY agency;

* Alguns registros têm o campo "city"vazio, e você precisa preenchê-los com base no incident_zip.
-- Criar tabela temporária para mapear incident_zip para a cidade mais comum
CREATE TEMPORARY TABLE zip_to_city AS
SELECT incident_zip, city
FROM (
    SELECT incident_zip, city,
           ROW_NUMBER() OVER (PARTITION BY incident_zip ORDER BY COUNT(*) DESC) AS rank
    FROM locations
    WHERE city IS NOT NULL AND incident_zip IS NOT NULL
    GROUP BY incident_zip, city
) AS ranked
WHERE rank = 1;

-- Atualizar registros na tabela locations com city vazio
UPDATE locations l
SET city = z.city
FROM zip_to_city z
WHERE l.incident_zip = z.incident_zip AND l.city IS NULL;

4. Análise dos dados
* Cálculo do número de incidentes por tipo - análise descritiva.
SELECT 
    ct.complaint_type, 
    COUNT(c.unique_key) AS number_of_incidents
FROM 
    complaints c
JOIN 
    complaintTypes ct ON c.complaint_type_id = ct.complaint_type_id
GROUP BY 
    ct.complaint_type
ORDER BY 
    number_of_incidents DESC;

* Detecção de outliers na duração dos incidentes, usando como base, tudo o que estiver fora do intervalo de 30 dias.
-- Calcular duração dos incidentes
SELECT 
    unique_key, 
    created_date, 
    closed_date,
    EXTRACT(DAY FROM (closed_date::timestamp - created_date::timestamp)) AS duration_days
    
INTO TEMPORARY TABLE incident_durations
FROM 
    complaints
WHERE 
    closed_date > created_date
    AND closed_date IS NOT NULL
    AND created_date IS NOT NULL
    AND created_date > '2010-01-01'::timestamp 
    AND closed_date < '2024-07-01'::timestamp;

-- Detectar outliers (duração > 30 dias)
SELECT 
    unique_key, 
    created_date, 
    closed_date, 
    duration_days
FROM 
    incident_durations
WHERE 
    duration_days > 30
ORDER BY 
    duration_days DESC;
    
* Análise da relação entre tipos de reclamação e resolução.
WITH ranked_resolutions AS (
    SELECT 
        ct.complaint_type, 
        c.resolution_description, 
        COUNT(*) AS resolution_count,
        RANK() OVER (
            PARTITION BY ct.complaint_type 
            ORDER BY COUNT(*) DESC
        ) AS rank
    FROM complaints c
    JOIN complainttypes ct ON c.complaint_type_id = ct.complaint_type_id
    GROUP BY ct.complaint_type, c.resolution_description
)
SELECT complaint_type, resolution_description, resolution_count
FROM ranked_resolutions
WHERE rank = 1
ORDER BY complaint_type, resolution_count DESC;

5. Views e subconsultas
* Criar uma view que retorne todos os incidentes que estão em aberto.
CREATE VIEW open_incidents AS
SELECT 
    c.unique_key, 
    c.created_date, 
    c.status, 
    ct.complaint_type,
    l.incident_address,
    l.city,
    l.borough
FROM 
    complaints c
JOIN 
    complaintTypes ct ON c.complaint_type_id = ct.complaint_type_id
JOIN 
    locations l ON c.location_id = l.location_id
WHERE 
    c.status = 'Open';
SELECT * FROM open_incidents;

* Criar uma view que mostre a contagem de incidentes por bairro.
CREATE VIEW incidents_by_borough AS
SELECT 
    "Borough" AS borough,
    COUNT("Unique Key") AS number_of_incidents
FROM 
    tb311
GROUP BY 
    "Borough"
ORDER BY 
    number_of_incidents DESC;
SELECT * FROM incidents_by_borough;

* Encontrar os 10 incidentes com o maior atraso entre a data de criação e a data de fechamento.
SELECT 
    c.unique_key, 
    c.created_date, 
    c.closed_date,
    EXTRACT(DAY FROM (c.closed_date::timestamp - c.created_date::timestamp)) AS delay_days,
    ct.complaint_type,
    l.incident_address,
    l.city,
    l.borough
FROM 
    complaints c
JOIN 
    complaintTypes ct ON c.complaint_type_id = ct.complaint_type_id
JOIN 
    locations l ON c.location_id = l.location_id
WHERE 
    c.closed_date IS NOT NULL
ORDER BY 
    delay_days DESC
LIMIT 10;

* Identificar endereços onde ocorreram mais de 5 reclamações diferentes.
SELECT 
    l.incident_address,
    l.city,
    l.borough,
    COUNT(DISTINCT ct.complaint_type) AS distinct_complaints_count
FROM 
    complaints c
JOIN 
    complaintTypes ct ON c.complaint_type_id = ct.complaint_type_id
JOIN 
    locations l ON c.location_id = l.location_id
WHERE
    l.incident_address IS NOT NULL
GROUP BY 
    l.incident_address, l.city, l.borough
HAVING 
    COUNT(DISTINCT ct.complaint_type) > 5
ORDER BY 
    distinct_complaints_count DESC;
    
 
